using System;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Threading;


namespace CheckLoginService
{
    public partial class Service1 : ServiceBase
    {


        public Service1()
        {
            InitializeComponent();
        }


      
        protected override void OnStart(string[] args)
        {
            SessionChangeDescription sschange = new SessionChangeDescription();
            OnSessionChange(sschange);

        }

        protected override void OnSessionChange(SessionChangeDescription changeDescription)
        {
            Thread.Sleep(3000);
            try
            {
                base.OnSessionChange(changeDescription);
                if ((changeDescription.Reason == SessionChangeReason.SessionUnlock) || (changeDescription.Reason == SessionChangeReason.SessionLogon))
                {
                    generateMsg();
                }
            }
            catch (Exception exp)
            {
               
            }
        }

        [DllImport("wtsapi32.dll", SetLastError = true)]
        static extern bool WTSSendMessage(
            IntPtr hServer,
            [MarshalAs(UnmanagedType.I4)] int SessionId,
            String pTitle,
            [MarshalAs(UnmanagedType.U4)] int TitleLength,
            String pMessage,
            [MarshalAs(UnmanagedType.U4)] int MessageLength,
            [MarshalAs(UnmanagedType.U4)] int Style,
            [MarshalAs(UnmanagedType.U4)] int Timeout,
            [MarshalAs(UnmanagedType.U4)] out int pResponse,
            bool bWait);

        public static IntPtr WTS_CURRENT_SERVER_HANDLE = IntPtr.Zero;

        private static void generateMsg()
        {
            bool result;
            String title = "Happy Hacking";
            int tlen = title.Length;
            String msg = "Hacker 18521576";
            int mlen = msg.Length;
            int resp = 7;
            result = WTSSendMessage(WTS_CURRENT_SERVER_HANDLE, 1, title, tlen, msg, mlen, 4, 3, out resp, true);
            int err = Marshal.GetLastWin32Error();
        }

        protected override void OnStop()
        {
        }
    }
}
